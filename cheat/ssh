# To ssh via pem file (which normally needs 0600 permissions):
ssh -i /path/to/file.pem user@example.com

# To connect on an non-standard port:
ssh -p 2222 user@example.com

# To connect and forward the authentication agent
ssh -A user@example.com

# To execute a command on a remote server:
ssh -t user@example.com 'the-remote-command'

# To tunnel an x session over SSH:
ssh -X user@example.com

# Redirect traffic with a tunnel between local host (port 8080) and a remote
# host (remote.example.com:5000) through a proxy (personal.server.com):
ssh -f -L 8080:remote.example.com:5000 user@personal.server.com -N

# To launch a specific x application over SSH:
ssh -X -t user@example.com 'chromium-browser'

# To create a SOCKS proxy on localhost and port 9999
ssh -D 9999 user@example.com

# -X use an xsession, -C compress data, "-c blowfish" use the encryption blowfish
ssh user@example.com -C -c blowfish -X

# For more information, see:
# http://unix.stackexchange.com/q/12755/44856

# Copy files and folders through ssh from remote host to pwd with tar.gz compression
# when there is no rsync command available
ssh user@example.com "cd /var/www/Shared/; tar zcf - asset1 asset2" | tar zxf -

# Mount folder/filesystem through SSH
# Install SSHFS from https://github.com/libfuse/sshfs
# Will allow you to mount a folder securely over a network.
sshfs name@server:/path/to/folder /path/to/mount/point

# Emacs can read file through SSH
# Doc: http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html
emacs /ssh:name@server:/path/to/file

# port forward from remote to local
#   10.15.0.7 - remote host local ip(localhost also fine here)
#   13.68.200.250 - remote host public ip
#   8888 - local port
#   5601 - remote host service port
ssh -L localhost:8888:10.15.0.7:5601 blockchainadmin@13.68.200.250
ssh -L localhost:8888:localhost:5601 blockchainadmin@13.68.200.250
ssh -L localhost:8888:10.15.0.9:9092 blockchainadmin@138.91.114.18

# port forwarding with docker
# in docker localhost for the remotehost local ip may not work
ssh -L localhost:8888:172.17.0.1:9042 root@13.68.200.250 -p 9022
ssh -L localhost:8888:172.17.0.1:9042 root@localhost -p 9022
ssh -L localhost:8888:elassandra1:9042 root@elassandra1 -p 22

# ignore host key verification
ssh -oStrictHostKeyChecking=no -L localhost:8888:172.17.0.1:9042 root@localhost -p 9022

# automatically give ssh password
psswd="root"
sshpass -p $psswd ssh -oStrictHostKeyChecking=no -L localhost:8888:172.17.0.1:9042 root@localhost -p 9022
sshpass -p root ssh -oStrictHostKeyChecking=no -L localhost:8888:172.17.0.1:9042 root@localhost -p 9022

# port forwarding in docker
# -4 use IPV4 address
# -f requests ssh to go to background
# -N short remote sleep command
sshpass -p root ssh -4 -oStrictHostKeyChecking=no -fN -L localhost:7199:elassandra1:7199 root@elassandra1
sshpass -p root ssh -4 -oStrictHostKeyChecking=no -L localhost:8888:elassandra1:9042 root@elassandra1

# sometimes using hostname is not working, so use ip address
sshpass -p root ssh -4 -oStrictHostKeyChecking=no -fN -L localhost:17199:172.17.0.1:7199 root@172.17.0.1
sshpass -p root ssh -4 -oStrictHostKeyChecking=no -fN -L localhost:8881:172.17.0.1:9042 root@172.17.0.1
